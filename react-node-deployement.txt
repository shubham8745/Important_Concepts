Perfect! ðŸš€ Hereâ€™s a complete professional deployment checklist for React frontend + Node.js (Express + MySQL) backend + PM2 + Nginx. This will ensure your deployment is smooth, maintainable, and production-ready.

ðŸ”¹ Step 0: Prerequisites

Linux server (Ubuntu/Debian recommended)

Node.js installed (LTS version)

Nginx installed

MySQL installed/configured

SSH access to server

Domain name pointing to server

ðŸ”¹ Step 1: Build React Frontend

Go to your React project:

cd frontend
npm install
npm run build   # generates dist/ or build/ folder


Upload dist/ to server:

rsync -avz dist/ user@server:/var/www/myapp

ðŸ”¹ Step 2: Setup Node.js Backend

Upload backend code to server:

cd /var/www
mkdir myapp-backend
rsync -avz backend/ myapp-backend/


Install dependencies:

cd myapp-backend
npm install


Test backend locally:

node server.js

ðŸ”¹ Step 3: Setup PM2 for Backend

Install PM2 globally:

npm install -g pm2


Create ecosystem.config.js in /var/www/myapp-backend:

module.exports = {
  apps: [
    {
      name: "myapp-backend",
      script: "server.js",
      instances: 1,
      exec_mode: "fork",
      watch: false,
      env: {
        NODE_ENV: "development",
        PORT: 5000,
        DB_HOST: "localhost",
        DB_USER: "myuser",
        DB_PASS: "mypassword",
        DB_NAME: "mydatabase",
        JWT_SECRET: "devsecret"
      },
      env_production: {
        NODE_ENV: "production",
        PORT: 5000,
        DB_HOST: "localhost",
        DB_USER: "myuser",
        DB_PASS: "securepassword",
        DB_NAME: "mydatabase",
        JWT_SECRET: "super-secret-prod-key"
      }
    }
  ]
};


Start backend in production mode:

pm2 start ecosystem.config.js --env production
pm2 save           # save current processes
pm2 startup        # setup auto-start on server reboot


Follow the pm2 startup command output to enable systemd startup.

ðŸ”¹ Step 4: Setup Nginx

Create Nginx site config:

sudo nano /etc/nginx/sites-available/myapp


Paste config:

server {
    listen 80;
    server_name myapp.com www.myapp.com;

    # React frontend
    root /var/www/myapp;
    index index.html;

    location / {
        try_files $uri /index.html;
    }

    # Node.js backend
    location /api/ {
        proxy_pass http://127.0.0.1:5000/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Optional: static asset caching
    location /static/ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    error_page 404 /index.html;
}


Enable site + reload Nginx:

sudo ln -s /etc/nginx/sites-available/myapp /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl reload nginx

ðŸ”¹ Step 5: Setup HTTPS (Letâ€™s Encrypt)
sudo apt install certbot python3-certbot-nginx -y
sudo certbot --nginx -d myapp.com -d www.myapp.com


Auto-renew is handled by Certbot.

ðŸ”¹ Step 6: Configure Firewall (Optional but Recommended)
sudo ufw allow 'Nginx Full'  # opens 80 and 443
sudo ufw enable
sudo ufw status

ðŸ”¹ Step 7: Check Everything

Frontend:

curl http://myapp.com


Should return index.html content.

Backend:

curl http://myapp.com/api/test


Should hit Node.js backend.

PM2 logs:

pm2 logs myapp-backend


Check errors or requests.

ðŸ”¹ Step 8: Deployment Updates (Future)

Update frontend:

cd frontend
npm run build
rsync -avz dist/ user@server:/var/www/myapp
sudo systemctl reload nginx


Update backend:

cd /var/www/myapp-backend
git pull
npm install
pm2 restart myapp-backend
pm2 save

ðŸ”¹ Step 9: Professional Tips

Use .env files for sensitive keys, never commit secrets.

Enable gzip compression in Nginx for faster React delivery.

Enable PM2 logs rotation:

pm2 install pm2-logrotate
pm2 set pm2-logrotate:max_size 10M
pm2 set pm2-logrotate:retain 30


Monitor PM2 dashboard: pm2 monit

âœ… Your setup now is fully production-ready:

React + Node.js + MySQL integrated

Auto-start on reboot

Nginx serving frontend + reverse proxy backend

SSL enabled

Logs & monitoring handled
